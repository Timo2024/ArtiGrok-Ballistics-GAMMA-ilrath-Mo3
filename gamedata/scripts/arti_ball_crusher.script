local volatile_crusher = {
	-- "Nightstar"/Volatile
    af_night_star 				= 60,
	af_sponge					= 90,
	af_dummy_dummy				= 90,
	af_ice						= 130,
	af_black_spray				= 130,
	af_death_lamp 				= 300,
}

local gravi_crusher = {
    -- "Gravi"/Gravitational
    af_medusa 					= 60,
	af_empty					= 90,
    af_vyvert 					= 90,
    af_gravi 					= 90,
	af_gold_fish				= 130,
	af_full_empty				= 150,
}

local fire_crusher = {	
    -- "Fireball"/Thermal
	af_itcher					= 60,
	af_dummy_glassbeads			= 60,
    af_pin 						= 60,
	af_eye						= 90,
    af_crystal 					= 90,
    af_fireball 				= 130,
	af_fire						= 130,
	af_fire_loop				= 300,
}

local chem_crusher = {	
    -- "Blood"/Chemical
	cristall_flower 			= 60,
    af_blood 					= 60,
    af_mincer_meat 				= 90,
	af_bracelet					= 90,
	af_lobster_eyes				= 90,
	af_baloon					= 130,
}

local electra_crusher = {	
	-- "Battery"/Electrical
    af_electra_sparkler 		= 60,
    af_dummy_battery 			= 60,
	af_electra_moonlight		= 90,
    af_ring 					= 90,
	af_electra_flash			= 130,
}

local omni_crusher = {	
	-- Omni/All fragments
	af_bat						= 30,
	af_soul						= 30,
	af_fuzz_kolobok				= 60,
	af_glass					= 90,
	af_oasis_heart				= 130,
	af_compass					= 130,
	af_monolith 				= 130,
}


local arti_crusher_mats =
{
	"powder_nightstar",
	"powder_gravi",
	"powder_fireball",
	"powder_blood",
	"powder_battery",
}


gc = game.translate_string
-- to powderize artifacts into crafting material

local modes = {
	["inventory"] = true,
}
local bags = {
	["actor_bag"] = true,
	["actor_equ"] = true,
	["actor_belt"] = true,
}
function try_crush(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
		local arte = obj:section()
		if volatile_crusher[arte] or gravi_crusher[arte] or fire_crusher[arte] or chem_crusher[arte] or electra_crusher[arte] or omni_crusher[arte] then
			return gc("st_crush")
		end
    end
end

--[[
function crush(obj, bag, mode)
    local to_create = arti_crusher[obj:section()]
    to_create = str_explode(to_create, ",")
    if to_create[1] then
        alife_release(obj)
        for i=1,tonumber(to_create[2]) do
            alife_create_item(to_create[1], db.actor)
        end
    end
end
--]]

-- Last edited: Nov. 24th, 2023
-- CXVilrath - Created to allow the Volat Emerald to give multiple powders + condition affects amount of powder given (ceil is used to be more forgiving)
-- CXVilrath 11/24/23 - Reworked to follow new structure
-- CXVilrath 3/13/24 - Added all other non-PBA artefacts + Knot into appropriate crusher lists above
-- CXVilrath 3/15/24 - Reworked for new artefact fragment stack size (for Ammo Maker compatability)
function crush_new(obj, bag, mode)
	local artefact = obj:section()
    local arte_frag = {}
	local amount = 1
	-- Volatile Fragments
	if volatile_crusher[artefact] then
		amount = volatile_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		arte_frag[#arte_frag + 1] = arti_crusher_mats[1]
	-- Gravitational Fragments
	elseif gravi_crusher[artefact] then
		amount = gravi_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        arte_frag[#arte_frag + 1] = arti_crusher_mats[2]
	-- Thermal Fragments
	elseif fire_crusher[artefact] then
		amount = fire_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        arte_frag[#arte_frag + 1] = arti_crusher_mats[3]
	-- Chemical Fragments
	elseif chem_crusher[artefact] then
		amount = chem_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        arte_frag[#arte_frag + 1] = arti_crusher_mats[4]
	-- Electrical Fragments
	elseif electra_crusher[artefact] then
		amount = electra_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        arte_frag[#arte_frag + 1] = arti_crusher_mats[5]
	-- Omni/All Fragments
	elseif omni_crusher[artefact] then
		local amount = omni_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        arte_frag = arti_crusher_mats
	end
	
	if amount and arte_frag[1] then
		alife_release(obj)
		for i=1, #arte_frag do
			alife_create_item(arte_frag[i], db.actor, {ammo = amount})
		end
	end
end

function on_game_start()
    custom_functor_autoinject.add_functor("arti_crush", try_crush, try_crush, nil, crush_new, true)
end