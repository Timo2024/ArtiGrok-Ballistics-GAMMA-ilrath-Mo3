volatile_crusher = {
	-- "Nightstar"/Volatile
    af_night_star 				= 4,
	af_empty					= 6,
	af_sponge					= 6,
	af_ice						= 8,
	af_death_lamp 				= 20,
}

gravi_crusher = {
    -- "Gravi"/Gravitational
    af_medusa 					= 4,
    af_vyvert 					= 6,
    af_gravi 					= 6,
	af_gold_fish				= 8,
}

fire_crusher = {	
    -- "Fireball"/Thermal
	af_dummy_glassbeads			= 4,
    af_pin 						= 6,
	af_eye						= 6,
    af_crystal 					= 6,
    af_fireball 				= 8,
}

chem_crusher = {	
    -- "Blood"/Chemical
    af_blood 					= 6,
    af_mincer_meat 				= 7,
	af_bracelet					= 7,
	af_baloon					= 10,
}

electra_crusher = {	
	-- "Battery"/Electrical
    af_electra_sparkler 		= 6,
    af_dummy_battery 			= 6,
	af_electra_moonlight		= 7,
    af_ring 					= 7,
	af_electra_flash			= 10,
}

omni_crusher = {	
	-- Omni/All fragments
	af_bat						= 2,
	af_monolith 				= 8,
}

--[[
arti_crusher_mats =
{
	"powder_nightstar",
	"powder_gravi",
	"powder_fireball",
	"powder_blood",
	"powder_battery",
}
--]]

gc = game.translate_string
-- to powderize artifacts into crafting material

local modes = {
	["inventory"] = true,
}
local bags = {
	["actor_bag"] = true,
	["actor_equ"] = true,
	["actor_belt"] = true,
}
function try_crush(obj, bag, mode)
    if obj and bags[bag] and modes[mode] then
		local arte = obj:section()
		if volatile_crusher[arte] or gravi_crusher[arte] or fire_crusher[arte] or chem_crusher[arte] or electra_crusher[arte] or omni_crusher[arte] then
			return gc("st_crush")
		end
    end
end

function crush(obj, bag, mode)
    local to_create = arti_crusher[obj:section()]
    to_create = str_explode(to_create, ",")
    if to_create[1] then
        alife_release(obj)
        for i=1,tonumber(to_create[2]) do
            alife_create_item(to_create[1], db.actor)
        end
    end
end

-- Last edited: Nov. 24th, 2023
-- CXVilrath - Created to allow the Volat Emerald to give multiple powders + condition affects amount of powder given (ceil is used to be more forgiving)
-- CXVilrath n24 - Reworked to follow new structure
function crush_new(obj, bag, mode)
	local artefact = obj:section()
    
	-- Volatile Fragments
	if volatile_crusher[artefact] then
		local amount = volatile_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
            alife_create_item("powder_nightstar", db.actor)
        end
	-- Gravitational Fragments
	elseif gravi_crusher[artefact] then
		local amount = gravi_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
            alife_create_item("powder_gravi", db.actor)
        end
	-- Thermal Fragments
	elseif fire_crusher[artefact] then
		local amount = fire_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
            alife_create_item("powder_fireball", db.actor)
        end
	-- Chemical Fragments
	elseif chem_crusher[artefact] then
		local amount = chem_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
            alife_create_item("powder_blood", db.actor)
        end
	-- Electrical Fragments
	elseif electra_crusher[artefact] then
		local amount = electra_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
            alife_create_item("powder_battery", db.actor)
        end
	-- Omni/All Fragments
	elseif omni_crusher[artefact] then
		local amount = omni_crusher[artefact] or 1
		amount = math.ceil(amount * obj:condition())
		alife_release(obj)
        for i=1,amount do
			alife_create_item("powder_blood", db.actor)
            alife_create_item("powder_battery", db.actor)
			alife_create_item("powder_gravi", db.actor)
			alife_create_item("powder_fireball", db.actor)
			alife_create_item("powder_nightstar", db.actor)
        end
	end
end

function on_game_start()
    custom_functor_autoinject.add_functor("arti_crush", try_crush, try_crush, nil, crush_new, true)
end