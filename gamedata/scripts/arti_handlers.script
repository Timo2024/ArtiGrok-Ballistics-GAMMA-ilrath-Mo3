----------------------------------------------------
----- EDIT for ArtiGrok - ilrathCXV (01/17/23) -----
----------------------------------------------------

print_dbg           = ballistics_mcm.print_dbg
play_particle       = ballistics_utils.play_particle
play_particle_firepoint = ballistics_utils.play_particle_firepoint
add_effect          = arti_timed_events.add_effect
play_sound_on_location = ballistics_utils.play_sound_on_location
math_random         = math.random

head_bones          = ballistics_utils.head_bones
ini_ammo            = ballistics_utils.ini_ammo
ini_damage          = ballistics_utils.ini_damage

local anims = {
    "norm_2_critical_hit_torso_0", -- good
    "norm_1_critical_hit_head_0", -- good
}

function get_special(ammo_sec)
    if ini_ammo:section_exist(ammo_sec) then
        local proc = ini_ammo:r_string_ex(ammo_sec, "special") or nil
        return proc
    end
end

function get_special_2(ammo_sec)
    if ini_ammo:section_exist(ammo_sec) then
        local proc = ini_ammo:r_string_ex(ammo_sec, "special_2") or nil
        return proc
    end
end

function is_actor(npc)
    return npc and npc:id() == AC_ID
end

function get_tier(val)
-- EDIT: Match to Grok's Armor Breakpoints (ilrathCXV - 12/12/22) --------------------------------------------

	val = val * 100
	if (val < 10) then val = 0
	elseif ( (val >= 10) and (val < 19) ) then val = 1
	elseif ( (val >= 19) and (val < 30) ) then val = 2
	elseif ( (val >= 30) and (val < 38) ) then val = 3
	elseif ( (val >= 38) and (val < 45) ) then val = 4
	elseif ( (val >= 45) and (val < 55) ) then val = 5
	elseif ( (val >= 55) and (val < 81) ) then val = 6
	elseif (val >= 81) then val = 7
	end
	
	return val
end
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ USE

local npc_stun = {}
function stun_npc(npc, flinch_stun_chance)
    if not is_actor(npc) and IsStalker(npc) then
		if math_random(100) < flinch_stun_chance and (not npc_stun[npc:id()] or npc_stun[npc:id()] == false) then
			play_anim(npc)
			npc_stun[npc:id()] = time_global() + 750
		end
    end
end


function play_anim(npc)
    if npc:movement_type() == move.walk or npc:movement_type() == move.run then
        npc:set_movement_type(move.stand)
    end
    npc:play_cycle(anims[math_random(#anims)], true)
	--npc:set_override_animation(anims[math_random(#anims)])
    state_mgr.set_state(npc, "idle")
	npc:movement_enabled(false)	
end

function on_enemy_eval(obj, enemy, flags)
    if npc_stun[obj:id()] and (enemy:id() == AC_ID) then
        if time_global() > npc_stun[obj:id()] then
            npc_stun[obj:id()] = false
			obj:movement_enabled(true)
		else 
			flags.override = true
			flags.ret_value = false 
			return
        end
    end
end

function npc_on_death_callback(victim, who)
    npc_stun[victim:id()] = nil
end

function fragment_sound(npc)
    play_sound_on_location("elite", npc)
end

function ambush(npc, s_hit, wpn)
    
    -- hitting distracted npc with suppressed weapon confers 20% damage bonus and ups pen one class (SP6 eq)
    if (wpn:weapon_is_silencer() and (not npc:best_enemy() or npc:best_enemy():id() ~= 0)) or (IsMelee(wpn)) then
		return true
	else
		return false
	end
end


function rip(npc, s_hit, headshot)

    if is_actor(npc) then return s_hit end
	
	local base_heal = 0.050
	
    if (s_hit.power > 0.5 and db.actor.health < 1) or headshot then
    	local s = xr_sound.get_safe_sound_object("Soul_"..math.random(5))
		s:play(db.actor, 0, sound_object.s2d)
    end
	
	if headshot then
		base_heal = 0.10
	end
		
	
    db.actor.health = clamp(db.actor.health + base_heal + (0.2 * s_hit.power), 0, 1)

end

function ignite_npc(npc, bone_id, wpn_id, stack, duration)
    play_particle(npc, bone_id, "artefact\\af_thermal_idle")
    stack = stack or 1
    duration = duration or 5
    print_dbg("Ignited %s", npc:id())
    play_sound_on_location("incendiary", npc)
    add_effect("ignite"..npc:id()..math.random(stack), duration, 
    function()
        play_particle(npc, 11, "damage_fx\\effects\\body_burn_01")
        if not npc:alive() then return end
		if IsStalker(npc) then
			damage_npc_grok(npc,(math_random(5, 15) * 0.01 ))
		else
			local h = hit()
			h.type = hit.burn
			h.draftsman = db.actor
			h.power = math_random(5, 15) * 0.01
			h.bone = "bip01_spine"
			h.weapon_id = wpn_id
			npc:hit(h)
		end
    end)
end

-- for corrosive ammo
function acid_damage(npc, bone_id)
	
    play_particle(npc, bone_id, "artefact\\effects\\af_acidic_idle_color")
	
    play_sound_on_location("acid", npc)

end

-- for 5.7 chaos sx
function chaos_damage(npc, bone_id, wpn_id)
    
    local extra_effect = math_random(26)
    if not is_actor(npc) then
        if extra_effect >= 3 and extra_effect < 5 then			-- Moderate ignite (stronger than API but less than Dragon's Breath)
            ignite_npc(npc, 11, wpn_id, 5, 5)
			extra_effect = 3
        elseif extra_effect >= 5 and extra_effect < 9 then		-- Stun NPC for 1 second
            stun_npc(npc, 1.0)
			extra_effect = 4
        elseif extra_effect >= 9 and extra_effect < 11 then		-- 10% Lifesteal based on final calc. hit power
			extra_effect = 5
        elseif extra_effect == 11 then 							-- Headhunter (no ignoring faction resistances)
			extra_effect = 6
        elseif extra_effect >= 12 and extra_effect < 16 then 	-- Acid Rounds
            play_particle(npc, bone_id, "artefact\\effects\\af_acidic_idle_color")
            play_sound_on_location("acid", npc)
			extra_effect = 7
        elseif extra_effect == 17 then							-- Explosive Rounds
            local explode_obj = alife_create_item("bullet_blow", npc)
            CreateTimeEvent(explode_obj.id, explode_obj.id, 0, 
            function(id)
                local explode_obj = get_object_by_id(id)
                if explode_obj then
                    explode_obj:explode(0)
                    return true
                end
                return false
            end, explode_obj.id)
			extra_effect = 8
		elseif extra_effect >= 18 and extra_effect < 21 then		-- Lightning Effect
			extra_effect = 9
		elseif extra_effect >= 21  and extra_effect < 24 then		-- Cloudkill Effect
			extra_effect = 10
        end
    end

    return extra_effect
end

local shock_effect = particles_object("artefact\\effects\\af_electra_show_flash_00")
-- for shock anti armor
function shock_damage(npc, bone_id, wpn_id, armor_amount)
	
	local armor_tier = get_tier(armor_amount)
    local lightning_bonus = 1 + (armor_tier * 0.6)
    snd = "electric"
    if armor_tier >= 3 then
        snd = "electric_big"
        play_particle(npc, bone_id, "amik\\anomaly\\electra\\electra_dust_distort")
		shock_effect:play_at_pos(npc:position())
        if not npc:alive() then return end
		
		local shock_power = armor_tier * 0.15
		
		local h = hit()
		h.type = hit.shock
		h.draftsman = db.actor
		h.power = shock_power
		h.bone = "bip01_spine"
		h.weapon_id = wpn_id
		
		if IsStalker(npc) then
			damage_npc_grok(npc,shock_power)
		else
			npc:hit(h)
		end
		
		radius = armor_tier

        level.iterate_nearest(npc:position(), radius, function(obj)
            if obj and obj:alive() and obj:id() ~= AC_ID then
				if IsStalker(obj) then
					damage_npc_grok(obj, shock_power)
				else
					obj:hit(h)
				end
            end
        end)
    end
    -- s_hit.power = tbl_reduce(calcs)
    play_sound_on_location(snd, npc)
    -- return s_hit
end

function damage_npc_grok(npc, power)
	npc:set_health_ex(npc.health - power)
end

local napalm_effect = particles_object("artefact\\af_thermal_show")
function napalm_damage(npc, wpn_id)
	napalm_effect:play_at_pos(npc:position())
	ignite_npc(npc, 11, wpn_id, 10, 10)
	
    --level.iterate_nearest(npc:position(), 5, function(obj)
    --    if obj and obj:alive() and obj:id() ~= AC_ID then
    --        ignite_npc(obj,11,wpn_id,2,5)
    --     end
    --end)
	
end

-- get position of where actor is aiming
function get_point_of_aim()
    gvid = db.actor:game_vertex_id()
    local r = level.get_target_dist and level.get_target_dist() or 3
    if r > 1000 then return end
    pos = vector():set(db.actor:position())
    pos:add(device().cam_dir:mul(r))
    lvid = level.vertex_id(pos)
    return {pos, lvid, gvid}
end

-- get position of bullet for create
function get_bullet_pos(bullet_pos)
    gvid = db.actor:game_vertex_id()
    pos = vector():set(bullet_pos)
    lvid = level.vertex_id(pos)
    return {pos, lvid, gvid}
end

function aoe_handler(bullet)
	if bullet.speed > 0 or bullet.speed < 0 then return end
	if bullet.parent_id ~= db.actor:id() then return end
	if not bullet.position then return end
	
	if not bullet.section then return end
	
	printf("[ArtiGrok - AoE] Bullet section: %s", bullet.section)
	
	napalm_handler(bullet)
	explode_handler(bullet)
end

function napalm_handler(bullet)
	ammo_sec = bullet.section
	
	if (get_special(ammo_sec) == "napalm") or (get_special_2(ammo_sec) == "napalm") then
		wpn_id = bullet.weapon_id or db.actor:active_item()
		level.iterate_nearest(bullet.position, 5, function(obj)
			if obj and obj:alive() and obj:id() ~= AC_ID then
				ignite_npc(obj,11,wpn_id,2,5)
			end
		end)
		play_sound_on_location("anomaly\\fireball_blow", npc)
	end
end

local mine_id = 0
function explode_handler(bullet)
    ammo_sec = bullet.section
	
	if (get_special(ammo_sec) == "explodes") or (get_special_2(ammo_sec) == "explodes") then
		
		local bullet_point = get_bullet_pos(bullet.position)
		if not bullet_point then printf("[ArtiGrok - Exp] No aimpoint found") return end
		local explode_obj = alife_create_item("bullet_blow", bullet_point)
		if not explode_obj then printf("[ArtiGrok - Exp] No bullet_blow created") return end
		
		local frag_radius = ini_sys:r_float_ex("bullet_blow", "frags_r")
		local frag_power = ini_sys:r_float_ex("bullet_blow", "frag_hit")
		local frag_impulse = ini_sys:r_float_ex("bullet_blow", "frag_hit_impulse")
		local blast_impulse = ini_sys:r_float_ex("bullet_blow", "blast_impulse")
		local total_frags = ini_sys:r_float_ex("bullet_blow", "frags")
		local blast_power = ini_sys:r_float_ex("bullet_blow", "blast")
		local blast_radius = ini_sys:r_float_ex("bullet_blow", "blast_r")
		local frags_temp = total_frags
		
		level.iterate_nearest(bullet.position, frag_radius, function(_obj)
            if (IsStalker(_obj) or IsMonster(_obj)) and _obj:id() ~= AC_ID then
				if _obj:alive() then
					local npc_pos = _obj:position()
					local dist = npc_pos:distance_to(bullet.position)
					local blast_div_factor = (((blast_radius * ((IsMonster(_obj) and 2) or 1)) - dist)/blast_radius) or 0
					blast_div_factor = clamp(blast_div_factor, 0, 1)
					local is_frag_hit = false
					local frag_hit_num = 0
					if total_frags > 0 then
						is_frag_hit = (frags_temp - total_frags) < math_random(total_frags, frags_temp)
						if is_frag_hit then
							frag_hit_num = math_random(1, total_frags) or 1
							total_frags = total_frags - frag_hit_num
						end
					end
					
					printf("[ArtiGrok - Exp] %s is hit with %s fragments (blast damage mod.: %s)", _obj and _obj:name(), frag_hit_num, blast_div_factor)
					
					local h = hit()
					h.type = (is_frag_hit and blast_div_factor < 0.3 and hit.fire_wound) or hit.explosion
					h.power = ((is_frag_hit and frag_power * frag_hit_num) or 0) + (blast_power * blast_div_factor)
					h.impulse = ((is_frag_hit and frag_impulse * frag_hit_num) or 0) + (blast_impulse * blast_div_factor)
					h.direction = VEC_Y
					h.bone = "bip01_spine"
					h.draftsman = db.actor
					h.weapon_id = explode_obj
					_obj:hit(h)
				end
            end
        end)
		
		CreateTimeEvent(explode_obj.id, explode_obj.id, 0, 
        function(id)
            local explode_obj = get_object_by_id(id)
            if explode_obj then
                explode_obj:explode(0)
				explode_obj:destroy_object()
                return true
            end
            return false
        end, explode_obj.id)
		
	end
end

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ END USE

-- randomly rip the durability
function condition_degrade_on_fire(amount, wpn, chance)
    local rand = math_random(chance)
    local weapon = wpn or db.actor:active_item()
	local dura_rip = amount or 0.0025
    if weapon and rand == 1 then
        weapon:set_condition(clamp(weapon:condition() - dura_rip, 0, 1))	-- Lose 0.25% condition when using variants
    end
end

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ USE
function play_acid()
    play_particle_firepoint("artefact\\effects\\af_acidic_idle_color_trail")
end
function play_shock()
    play_particle_firepoint("anomaly2\\effects\\electra_entrance_small")
end
function play_grav_sound()
    play_particle_firepoint("anomaly2\\bloodsucker_shield")
    play_sound_on_location("soulripper", db.actor)
end
function play_grav()
    play_particle_firepoint("anomaly2\\bloodsucker_shield")
end
function play_fire_big()
    play_particle_firepoint("artefact\\af_thermal_idle")
end

local custom_proj_table = {
    ["explodes"] = play_grav,
    ["soulripper"] = play_grav_sound,
    ["chaos"] = play_grav,
    ["shock"] = play_shock,
    ["fire_melt"] = play_fire_big,
	["napalm"] = play_fire_big,
    ["acid"] = play_acid,
	["head"] = play_grav
}

function actor_on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
    local ammo_table = utils_item.get_ammo(wpn:section(), wpn:id())
    ammo_type = wpn:get_ammo_type()
    if ammo_table[ammo_type + 1] and custom_proj_table[get_special(ammo_table[ammo_type + 1])] then
        custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")]()
	end
	if ammo_table[ammo_type + 1] and custom_proj_table[get_special_2(ammo_table[ammo_type + 1])] then
        custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")]()
	end
	
	if ammo_table[ammo_type + 1] and 
	(custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")] or custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special_2")]) then
		condition_degrade_on_fire(0.0105, wpn, 4)			-- Lose 1.05% durability when firing these rounds on a 25% (un)lucky roll
    elseif ammo_table[ammo_type + 1] and string.find(ammo_table[ammo_type + 1], "bad") or string.find(ammo_table[ammo_type + 1], "_eco") then
		condition_degrade_on_fire(0.0025, wpn, 10)			-- Lose 0.25% durability when firing these rounds on a 10% (un)lucky roll
	end
end
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ END USE

-- enhanced recoil patch
if enhanced_recoil then
    RecoilMult = enhanced_recoil.recoil_multiplier
    function enhanced_recoil.recoil_multiplier(wpn, shotc)
        local sect = wpn:section()
        local ammo_list = utils_item.get_ammo(sect, wpn:id())
        local ammo_type = ammo_list[wpn:get_ammo_type() + 1]
        return RecoilMult(wpn, shotc) * (ini_ammo:r_float_ex(ammo_type, "recoil") or 1)
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
    RegisterScriptCallback("on_enemy_eval", on_enemy_eval)
    RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
	
	RegisterScriptCallback("bullet_on_remove", aoe_handler)
end