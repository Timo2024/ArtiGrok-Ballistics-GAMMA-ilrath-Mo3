----------------------------------------------------
----- EDIT for ArtiGrok - ilrathCXV (01/17/23) -----
----------------------------------------------------

print_dbg           = ballistics_mcm.print_dbg
play_particle       = ballistics_utils.play_particle
play_particle_firepoint = ballistics_utils.play_particle_firepoint
add_effect          = arti_timed_events.add_effect
play_sound_on_location = ballistics_utils.play_sound_on_location
math_random         = math.random

-- Bone_IDs            = ballistics_utils.Bone_IDs
head_bones          = ballistics_utils.head_bones
ini_ammo            = ballistics_utils.ini_ammo
ini_damage          = ballistics_utils.ini_damage

local anims = {
    "norm_2_critical_hit_torso_0", -- good
    "norm_1_critical_hit_head_0", -- good
}


-- pulls custom ap and hit power values from code
function get_ammo_data(ammo_sec)
    if ini_ammo:section_exist(ammo_sec) then
        return {
            sec     = ammo_sec,
			
			-- Arti's damage values (will be ignoring in this case)
            -- k_hit   = ini_ammo:r_float_ex(ammo_sec, "k_hit") or SYS_GetParam(2, ammo_sec, "k_hit") or 1,
			
			k_hit = ini_sys:r_float_ex(ammo_sec, "k_hit") or 1,
			
            k_ap    = ini_ammo:r_float_ex(ammo_sec, "k_ap") or SYS_GetParam(2, ammo_sec, "k_ap") or 0,
            k_pen   = ini_ammo:r_float_ex(ammo_sec, "k_pen") or 0,
            k_imp   = ini_ammo:r_float_ex(ammo_sec, "k_imp") or 0
        }
    end
end

function is_actor(npc)
    return npc and npc:id() == AC_ID
end

function get_tier(val)
-- EDIT: Match to Grok's Armor Breakpoints (ilrathCXV - 12/12/22) --------------------------------------------

	val = val * 100
	if (val < 10) then val = 0
	elseif ( (val >= 10) and (val < 19) ) then val = 1
	elseif ( (val >= 19) and (val < 30) ) then val = 2
	elseif ( (val >= 30) and (val < 38) ) then val = 3
	elseif ( (val >= 38) and (val < 45) ) then val = 4
	elseif ( (val >= 45) and (val < 55) ) then val = 5
	elseif ( (val >= 55) and (val < 81) ) then val = 6
	elseif (val >= 81) then val = 7
	end
	
	return val
end
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ USE

local npc_stun = {}
function stun_npc(npc, flinch_stun_chance)
    if not is_actor(npc) and IsStalker(npc) then
		if math_random() < flinch_stun_chance then
			play_anim(npc)
			npc_stun[npc:id()] = time_global() + 750
		end
    end
end


function play_anim(npc)
    if npc:movement_type() == move.walk or npc:movement_type() == move.run then
        npc:set_movement_type(move.stand)
    end
    --npc:play_cycle(anims[math_random(#anims)], true)
	npc:set_override_animation(anims[math_random(#anims)])
    state_mgr.set_state(npc, "idle")
end

function on_enemy_eval(obj, enemy, flags)
    if npc_stun[obj:id()] then
        if time_global() > npc_stun[obj:id()] then
            npc_stun[obj:id()] = false
        else 
            flags.override = true
            flags.ret_value = false 
        end
    end
end

function npc_on_death_callback(victim, who)
    npc_stun[victim:id()] = nil
end

function fragment_sound(npc)
    play_sound_on_location("elite", npc)
end

function ambush(npc, s_hit, wpn)
    
    -- hitting distracted npc with suppressed weapon confers 20% damage bonus and ups pen one class (SP6 eq)
    if (wpn:weapon_is_silencer() and (not npc:best_enemy() or npc:best_enemy():id() ~= 0)) or (IsMelee(wpn)) then
		return true
	else
		return false
	end
end


function rip(npc, s_hit, headshot)

    if is_actor(npc) then return s_hit end
	
	local base_heal = 0.050
	
    if (s_hit.power > 0.5 and db.actor.health < 1) or headshot then
    	local s = xr_sound.get_safe_sound_object("Soul_"..math.random(5))
		s:play(db.actor, 0, sound_object.s2d)
    end
	
	if headshot then
		base_heal = 0.10
	end
		
	
    db.actor.health = clamp(db.actor.health + base_heal + (0.2 * s_hit.power), 0, 1)

end

function ignite_npc(npc, bone_id, stack, duration)
    play_particle(npc, bone_id, "artefact\\af_thermal_idle")
    stack = stack or 1
    duration = duration or 5
    print_dbg("Ignited %s", npc:id())
    play_sound_on_location("incendiary", npc)
    add_effect("ignite"..npc:id()..math.random(stack), duration, 
    function()
        play_particle(npc, 11, "damage_fx\\effects\\body_burn_01")
        if not npc:alive() then return end
        local h = hit()
        h.type = hit.burn
        h.draftsman = db.actor
        h.power = math_random(5, 15) * 0.01
        h.bone = "bip01_spine"
        npc:hit(h)
    end)
end

-- ignite + reduce armor
function dragonsbreath(npc, bone_id)
    ignite_npc(npc, bone_id, 10, 10)
end

-- ignite
function fire_damage(npc, bone_id, ignite_chance)
    if math_random() < ignite_chance then
        ignite_npc(npc, bone_id, 3, 10)
    end
end

-- for corrosive ammo
function acid_damage(npc, bone_id)
	
    play_particle(npc, bone_id, "artefact\\effects\\af_acidic_idle_color")
	
    play_sound_on_location("acid", npc)

end

-- for 5.7 chaos sx
function chaos_damage(npc, s_hit, bone_id)
    
    local extra_effect = math_random(25)
    if not is_actor(npc) then
        if extra_effect >= 3 and extra_effect < 5 then
            ignite_npc(npc, 11, 5, 5)
			extra_effect = 3
        elseif extra_effect >= 5 and extra_effect < 9 then
            stun_npc(npc, 1.0)
			extra_effect = 4
        elseif extra_effect >= 9 and extra_effect < 11 then
            db.actor.health = clamp(db.actor.health + (0.1 * s_hit.power), 0, 1)
			extra_effect = 5
        elseif extra_effect == 11 then
			extra_effect = 6
            -- random full AP
            -- calcs.ap_calc = 1
        elseif extra_effect >= 12 and extra_effect < 16 then
            play_particle(npc, bone_id, "artefact\\effects\\af_acidic_idle_color")
            -- modify_bone(npc, bone_id, clamp(bone_data.armor * 0.8, 0, 1))
            play_sound_on_location("acid", npc)
			extra_effect = 7
        elseif extra_effect == 17 then
            local explode_obj = alife_create_item("bullet_blow", npc)
            CreateTimeEvent(explode_obj.id, explode_obj.id, 0, 
            function(id)
                local explode_obj = get_object_by_id(id)
                if explode_obj then
                    explode_obj:explode(0)
                    return true
                end
                return false
            end, explode_obj.id)
			extra_effect = 8
		elseif extra_effect >= 18 and extra_effect < 21 then
			-- Lightning Effect
			extra_effect = 9
		elseif extra_effect >= 21  and extra_effect < 24 then
			-- Cloudkill Effect
			extra_effect = 10
        end
    end

    return extra_effect
end

local shock_effect = particles_object("artefact\\effects\\af_electra_show_flash_00")
-- for shock anti armor
function shock_damage(npc, bone_id, armor_amount)
	
	local armor_tier = get_tier(armor_amount)
    local lightning_bonus = 1 + (armor_tier * 0.6)
    snd = "electric"
    if armor_tier >= 3 then
        snd = "electric_big"
        play_particle(npc, bone_id, "amik\\anomaly\\electra\\electra_dust_distort")
        local h = hit()
        h.type = hit.shock
        h.draftsman = db.actor
        h.power = armor_tier * 0.15
        h.bone = "bip01_spine"
        radius = armor_tier

        level.iterate_nearest(npc:position(), radius, function(obj)
            if obj and obj:alive() and obj:id() ~= AC_ID then
                obj:hit(h)
                shock_effect:play_at_pos(obj:position())
            end
        end)
    end
    -- s_hit.power = tbl_reduce(calcs)
    play_sound_on_location(snd, npc)
    -- return s_hit
end

-- get position of where actor is aiming
function get_point_of_aim()
    gvid = db.actor:game_vertex_id()
    local r = level.get_target_dist and level.get_target_dist() or 3
    if r > 1000 then return end
    pos = vector():set(db.actor:position())
    pos:add(device().cam_dir:mul(r))
    lvid = level.vertex_id(pos)
    return {pos, lvid, gvid}
end

local mine_id = 0
function explode_handler()
    local aim_point = get_point_of_aim()
    if not aim_point then return end
    local explode_obj = alife_create_item("bullet_blow", aim_point)
    CreateTimeEvent(explode_obj.id, explode_obj.id, 0, 
    function(id)
        local explode_obj = get_object_by_id(id)
        if explode_obj then
            explode_obj:explode(0)
			explode_obj:destroy_object()
            return true
        end
        return false
    end, explode_obj.id)
end

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ END USE

-- randomly rip the durability
function condition_degrade_on_fire(amount, wpn, chance)
    local rand = math_random(chance)
    local weapon = wpn or db.actor:active_item()
	local dura_rip = amount or 0.0025
    if weapon and rand == 1 then
        weapon:set_condition(clamp(weapon:condition() - dura_rip, 0, 1))	-- Lose 0.25% condition when using variants
    end
end

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ USE
function play_acid()
    play_particle_firepoint("artefact\\effects\\af_acidic_idle_color_trail")
end
function play_shock()
    play_particle_firepoint("anomaly2\\effects\\electra_entrance_small")
end
function play_grav_sound()
    play_particle_firepoint("anomaly2\\bloodsucker_shield")
    play_sound_on_location("soulripper", db.actor)
end
function play_grav()
    play_particle_firepoint("anomaly2\\bloodsucker_shield")
end
function play_fire_big()
    play_particle_firepoint("artefact\\af_thermal_idle")
end

local custom_proj_table = {
    ["explodes"] = explode_handler,
    ["soulripper"] = play_grav_sound,
    ["chaos"] = play_grav,
    ["shock"] = play_shock,
    ["fire_melt"] = play_fire_big,
    ["acid"] = play_acid,
	["head"] = play_grav
}

function actor_on_weapon_fired(obj, wpn, ammo_elapsed, grenade_elapsed, ammo_type, grenade_type)
    local ammo_table = utils_item.get_ammo(wpn:section(), wpn:id())
    ammo_type = wpn:get_ammo_type()
    if ammo_table[ammo_type + 1] and custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")] then
        custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")]()
	end
	
	if ammo_table[ammo_type + 1] and custom_proj_table[ini_ammo:r_string_ex(ammo_table[ammo_type + 1], "special")] then
		condition_degrade_on_fire(0.0105, wpn, 4)			-- Lose 1.05% durability when firing these rounds on a 25% (un)lucky roll
    elseif ammo_table[ammo_type + 1] and string.find(ammo_table[ammo_type + 1], "bad") then
		condition_degrade_on_fire(0.0025, wpn, 10)			-- Lose 0.25% durability when firing these rounds on a 10% (un)lucky roll
	end
end
------------------------------------------------------------------------------------
------------------------------------------------------------------------------------ END USE

-- enhanced recoil patch
if enhanced_recoil then
    RecoilMult = enhanced_recoil.recoil_multiplier
    function enhanced_recoil.recoil_multiplier(wpn, shotc)
        local sect = wpn:section()
        local ammo_list = utils_item.get_ammo(sect, wpn:id())
        local ammo_type = ammo_list[wpn:get_ammo_type() + 1]
        return RecoilMult(wpn, shotc) * (ini_ammo:r_float_ex(ammo_type, "recoil") or 1)
    end
end

function on_game_start()
    RegisterScriptCallback("actor_on_weapon_fired", actor_on_weapon_fired)
    RegisterScriptCallback("on_enemy_eval", on_enemy_eval)
    RegisterScriptCallback("npc_on_death_callback", npc_on_death_callback)
end