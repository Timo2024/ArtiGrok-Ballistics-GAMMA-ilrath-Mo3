----------------------------------------------------
-- EDIT for ArtiGrok - ilrathCXV (01/17/23) 
-- Added Knife Stat Compat. (credit to Momopate) - ilrathCXV (11/13/23)
----------------------------------------------------
-- if a_wpo_parts then end
if momopate_knife_stats then end

local ini_ammo = ini_file("ammo\\importer.ltx")

function inject_stats()
    utils_ui.stats_table["ammo"] = {
    ["damage"] = { 
        index= 10, typ= "float",   name= "st_prop_k_hit",         icon_p= "ui_wp_prop_damage",            icon_n= "", track= false,  magnitude= 1,     unit= "st_perc", 		compare= false, sign=false,		sign_inverse = false,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_damage"} },
    ["ap"] = { 
        index= 20, typ= "string",  name= "st_prop_k_ap",          icon_p= "ui_wp_propery_04",             icon_n= "", track= false,  magnitude= 1,      unit= "",  				compare= false, sign= false,	sign_inverse = false, 	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_ap"} },

    ["projectiles"] = { 
        index= 30, typ= "float",   name= "st_prop_projectiles",   icon_p= "ui_wp_prop_skorostrelnost",    icon_n= "", track= false,  magnitude= 1,      unit= "",           	compare= false, sign= false, 	sign_inverse = false,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_projectiles"} },


    ["hp"]= { 
        index= 40, typ= "float",   name= "st_prop_k_hp",          icon_p= "ui_am_prop_restore_bleeding",  icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",  		compare= false, sign= true, 	sign_inverse = false,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_hp"} },
    ["mp"]= { 
        index= 50, typ= "float",   name= "st_prop_k_mp",          icon_p= "ui_am_prop_wound",  			  icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",   		compare= false, sign= true, 	sign_inverse = false,	show_always= true, value_functor= {"cxv_ammo_stats_tbl","prop_mp"} },


    ["accuracy"] ={ 
        index= 60, typ= "float",   name= "st_prop_k_disp",        icon_p= "ui_wp_prop_tochnost",          icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",       	compare= false, sign= true, 	sign_inverse = false,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_accuracy"} } ,
    ["velocity"]={ 
        index= 70, typ= "float",   name= "st_prop_k_vel",         icon_p= "ui_wp_prop_nastilnost",        icon_n= "", track= false,  magnitude= 1,      unit= "st_perc",      	compare= false, sign= true, 	sign_inverse = false,	show_always= false, value_functor= {"cxv_ammo_stats_tbl","prop_flatness"} } ,

	-- Momopate's Accurate Stats Addons
	["range"]={
		index = 80, typ = "float", name = "st_mp_a_dist", 		  icon_p = "ui_wp_propery_13", 		  	  icon_n = "", track = false, magnitude = 1,	unit = "st_perc",		compare = false, sign = false,	sign_inverse = false,	show_always = false,	value_functor = { "cxv_ammo_stats_tbl", "prop_range" } },
	["penalty"]={
		index = 90,typ = "float", name = "st_mp_a_nopen",		  icon_p = "ui_wp_propery_12",		  	  icon_n = "", track = false, magnitude = 1,	unit = "st_perc",		compare = false, sign = false,	sign_inverse = true,	show_always = false,	value_functor = { "cxv_ammo_stats_tbl", "prop_nopen" } },
	-- Addons end
	
	["special"]={ 
        index= 100, typ= "float",  name= "st_prop_special",       icon_p= "ui_am_condition",              icon_n= "", track= false,  magnitude= 1,      unit= "",   			compare= false, sign= false, 							show_always=false, value_functor= {"cxv_ammo_stats_tbl","prop_special"} } ,
    ["special_2"]={ 
        index= 110, typ= "float",  name= "st_prop_extra",         icon_p= "ui_am_condition",           	  icon_n= "", track= false,  magnitude= 1,      unit= "",   			compare= false, sign= false, 							show_always=false, value_functor= {"cxv_ammo_stats_tbl","prop_extra_special"} } ,
   	}
end

if ish_item_stats then
    override_stats_table = ish_item_stats.override_stats_table
    ish_item_stats.override_stats_table = function()
        override_stats_table()
        inject_stats()
    end
end

local function armor_to_class(val)
-- EDIT: Match to Grok's Armor Breakpoints (ilrathCXV - 12/12/22)

	val = val * 100
	if (val < 11) then val = 0
	elseif ( (val >= 11) and (val < 19) ) then val = 1
	elseif ( (val >= 19) and (val < 30) ) then val = 2
	elseif ( (val >= 30) and (val < 39) ) then val = 3
	elseif ( (val >= 39) and (val < 46) ) then val = 4
	elseif ( (val >= 46) and (val < 55) ) then val = 5
	elseif ( (val >= 55) and (val < 81) ) then val = 6
	elseif (val >= 81) then val = 7
	end

	return game.translate_string("st_prop_armor_"..val)		
end

local function armor_to_number(val)
	val = math.floor(val * 100) or 0
	return val
end

prepare_stats_table = utils_ui.prepare_stats_table

function utils_ui.prepare_stats_table()
    prepare_stats_table()
    inject_stats()
end

GetTable = utils_ui.get_stats_table
function utils_ui.get_stats_table(sec)
    if ini_ammo:section_exist(sec) then
        if not utils_ui.stats_table["ammo"] or is_empty(utils_ui.stats_table["ammo"]) then 
            inject_stats() 
        end
        return utils_ui.stats_table["ammo"]
    else
        return GetTable(sec)
    end
end

GetType = utils_ui.UIInfoItem.GetType
function utils_ui.UIInfoItem:GetType(sec)
    if ini_ammo:section_exist(sec) then return "ammo"
    else return GetType(self, sec) end
end

-- patching sync_finale because these post-update effects should only be applied once
Sync_Finale = utils_ui.UIInfoItem.Sync_Finale
function utils_ui.UIInfoItem:Sync_Finale(cond, ele_syncer, ele_resizer, ele_adapter, offset)
    local ret = Sync_Finale(self, cond, ele_syncer, ele_resizer, ele_adapter, offset)
    if not ele_syncer then return ret end
    -- patch the armor val
    local sec = self.section
    local obj = self.id and level.object_by_id(self.id) or nil
	
	local get_slot = SYS_GetParam(2, sec, "animation_slot") or 0
	local is_knife = false
    if (SYS_GetParam(0, sec, "kind") == "w_melee") and (get_slot ~= 13) then
		knife_ammo_sec = SYS_GetParam(0, sec, "ammo_class") or "nil"
		if knife_ammo_sec ~= "nil" then
			is_knife = true
		end
	end
	
    if (sec and ini_ammo:section_exist(sec)) or (is_knife and knife_ammo_sec) then
        for i=1,#self.stats do
			if self.stats[i].cap:GetText() == game.translate_string("st_prop_k_ap") then
                local str
                local ap = ini_sys:r_float_ex(is_knife and knife_ammo_sec or sec, "k_ap") or 0
				ap = ap * 10
                str = armor_to_class(ap) .. " (" .. armor_to_number(ap) ..")"
                self.stats[i].txt:SetText(str)
            end
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_special") then    
                local str_spec = ini_ammo:r_string_ex(is_knife and knife_ammo_sec or sec, "special")
                if str_spec then
					if str_spec == "frag" then
						local frag_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec) .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(frag_str)
					elseif str_spec == "fire" then
						local fire_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "burn_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(fire_str)
					elseif str_spec == "shock" then
						local shock_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "shock_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(shock_str)	
					elseif str_spec == "flinch" then
						local flinch_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec) .. game.translate_string("st_ballistics_"..str_spec)
						self.stats[i].txt:SetText(flinch_str)
					else
						self.stats[i].txt:SetText(game.translate_string("st_ballistics_"..str_spec))
					end
                end
            end
			if self.stats[i].cap:GetText() == game.translate_string("st_prop_extra") then    
                local str_spec_2 = ini_ammo:r_string_ex(is_knife and knife_ammo_sec or sec, "special_2")
                if str_spec_2 then
					if str_spec_2 == "frag" then
						local frag_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec_2) .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(frag_str)
					elseif str_spec_2 == "fire" then
						local fire_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "burn_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(fire_str)
					elseif str_spec_2 == "shock" then
						local shock_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, "shock_stacks") .. " " .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(shock_str)
					elseif str_spec_2 == "flinch" then
						local flinch_str = ini_ammo:r_float_ex(is_knife and knife_ammo_sec or sec, str_spec_2) .. game.translate_string("st_ballistics_"..str_spec_2)
						self.stats[i].txt:SetText(flinch_str)
					else
						self.stats[i].txt:SetText(game.translate_string("st_ballistics_"..str_spec_2))
					end
                end
            end
            if self.stats[i].cap:GetText() == game.translate_string("st_prop_k_hit") and (ini_ammo:r_string_ex(sec, "special") == "chaos" or ini_ammo:r_string_ex(sec, "special_2") == "chaos") then
                self.stats[i].txt:SetText("60-160%")
            end
        end
    end

end

function prop_damage(obj, sec)
    -- return math.floor(100 * (ini_ammo:r_float_ex(sec, "k_hit") or SYS_GetParam(2, sec, "k_hit") or 1))
	return math.floor(100 * (SYS_GetParam(2, sec, "k_hit") or 1))
end

-- pull from the armor classification
function prop_ap(obj, sec)
	return 1
end

function prop_hp(obj, sec)
    local hp = ini_ammo:r_float_ex(sec, "k_hp") or 1
    return hp > 1.01 and math.floor(100 * (hp - 1)) or 0
end

function prop_mp(obj, sec)
    local mp = ini_ammo:r_float_ex(sec, "k_mp") or 1
    return mp > 1.01 and math.floor(100 * (mp - 1)) or 0
end

function prop_projectiles(obj, sec)
    local proj = SYS_GetParam(2, sec, "buck_shot")
    return proj > 2 and proj or 0
end

-- 'normal' bullet dispersion is out of 0.66
local BASE = 0.7
function prop_accuracy(obj, sec)
    local accuracy = SYS_GetParam(2, sec, "k_disp") or BASE
    local proj = SYS_GetParam(2, sec, "buck_shot")
    if math.abs(accuracy - BASE) > 0.01 and proj == 1 then
        return math.floor(100 * (BASE - accuracy)/BASE)
    else return 0 end
end


function prop_flatness(obj, sec)
    local flat = SYS_GetParam(2, sec, "k_bullet_speed")
    if flat ~= 1 then
        return math.floor(100 * (flat - 1))
    else return 0
    end
end

function prop_recoil(obj, sec)
    if not enhanced_recoil_mcm then return 0 end
    local recoil = SYS_GetParam(2, sec, "recoil")
    if recoil ~= 1 then
        return recoil
    else return 0
    end
end

function prop_wear(obj, sec)
    local impair = ini_ammo:r_float_ex(sec, "impair") or 1
    if impair ~= 1 then
        return math.floor(100 * impair)
    else return 0
    end
end

function prop_special(obj, sec)
    local str_spec = ini_ammo:r_string_ex(sec, "special")
    if str_spec then return 1 else return 0 end
end

function prop_extra_special(obj, sec)
    local str_spec = ini_ammo:r_string_ex(sec, "special_2")
    if str_spec then return 1 else return 0 end
end

-- Momopate's Additions
function prop_nopen(obj, sec)
	local penalty = 0
	
	if grok_bo then
		local ammo_sec = obj and obj:section() or sec
		if grok_bo.hp_rounds and grok_bo.hp_rounds[ammo_sec] then
			penalty = (1 / (grok_bo.hp_rounds[ammo_sec])) * 100
		end
	else
		return 0
	end
	
	local val = (penalty ~= 100) and penalty or 0
	
	if val > 100 then
		val = val * -1
	end
	
	if (penalty > 10) then
		return round_idp(val, 1)
	else
		return round_idp(val, 2)
	end
	
	return 0
end

function prop_falloff(obj, sec)
	local perc = round_idp(100 * (SYS_GetParam(2, obj and obj:section() or sec, "k_air_resistance") or 0), 2)
	if perc >= 110 then
		perc = (perc - 110) * -1
	end
	return (round_idp(((perc * 100) / 110), 1))
end

function prop_range(obj, sec)
	local val = (SYS_GetParam(2, obj and obj:section() or sec, "k_dist") or 1)
	if val > 1 then
		val = val * -1
	end
	if val == 1 then 
		return 0 
	end
	if (val < 0.1) then
		return (round_idp(val * 100, 1))
	else
		return (round_idp(val * 100, 0))
	end
	return 0
end

function prop_cost(obj, sec)
	local val = 1
	local custom_cost = ballistics_mcm.get_config("cost") or false
	if custom_cost then
		val = ini_ammo:r_float_ex(sec, "cost") or  (SYS_GetParam(2, obj and obj:section() or sec, "cost")) or 1
	end
	if not custom_cost then
		val = (SYS_GetParam(2, obj and obj:section() or sec, "cost")) or 1
	end
	if val <= 1 then 
		return 0 
	end
	if val > 1 then
		return val
	end
	return 0
end